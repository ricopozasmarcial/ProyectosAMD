// MiniLan.cup
// Version para inicial para el Analisis Sintactico 
import java_cup.runtime.*;
import java.lang.Math;

action code {:
		NewHashMap table = new NewHashMap();
:};
parser code {:
        public static void main(String args[]) throws Exception {
                new parser(new Yylex(System.in)).parse();        } // End Main
:} // End parser code

terminal BEGIN, END, PRINT;
terminal PLUS, MINUS, MULT, DIV, EXP;
terminal EOS, LP, RP;
terminal GT, LT, EQ, SET;
terminal Double NUMBER;
terminal String IDENT;

non terminal program, instructions, instruction, sentence, printSentence, assignSentence;
non terminal Double factor, power, term, arithExpr;
non terminal Boolean boolExpr;


program			::= BEGIN instructions END			{: System.out.println("    PARSER:: program <== BEGIN instructions END"); :}
                ;

instructions	::= instructions instruction		{: System.out.println("    PARSER:: instructions <== instructions instruction");:} 	
                | instruction						{: System.out.println("    PARSER:: instructions <== instruction");:} 	
                ;

instruction    	::= sentence EOS					{: System.out.println("    PARSER:: instruction <== sentence EOS");:} 
                ;	

sentence        ::= printSentence					{: System.out.println("    PARSER:: sentence <== printSentence");:} 	
				| assignSentence					{: System.out.println("    PARSER:: sentence <== assignSentence");:} 	
                ;
					
printSentence   ::= PRINT LP arithExpr:a RP			{: System.out.println("    PARSER:: printSentence <== PRINT ("+a+")"); :}
				| PRINT LP boolExpr:b RP			{: System.out.println("    PARSER:: printSentence <== PRINT ("+b+")"); :}
				;

assignSentence	::= IDENT:i SET arithExpr:a			{: table.put(i,a);
					System.out.println("    PARSER:: printSentence <== ASSIGN ("+i+" = "+a+")"); :}
				;
				
boolExpr		::= arithExpr:a GT arithExpr:b	
					{: if (a.compareTo(b) > 0)
						RESULT = true;
					else
						RESULT = false;
					System.out.println("	PARSER:: bool<"+RESULT+"> <== arithExpr<"+a+"> GT arithExpr<"+b+">"); :}
				| arithExpr:a LT arithExpr:b		
					{: if (a.compareTo(b) < 0)
						RESULT = true;
					 else
						RESULT = false;								
					System.out.println("	PARSER:: bool<"+RESULT+"> <== arithExpr<"+a+"> LT arithExpr<"+b+">"); :}
				| arithExpr:a EQ arithExpr:b		{: RESULT = a.equals(b);
					System.out.println("	PARSER:: bool<"+RESULT+"> <== arithExpr<"+a+"> EQ arithExpr<"+b+">"); :}
				;		    

arithExpr       ::= arithExpr:a PLUS term:t			{: RESULT = a+t;
					System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> PLUS term<"+t+">"); :} 
				| arithExpr:a MINUS term:t			{: RESULT = a-t;
					System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> MINUS term<"+t+">"); :} 
				| term:t							{: RESULT = t;
					System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== term"); :}
                ;
				
term            ::= term:t MULT power:p				{: RESULT = t*p;
					System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> MULT power<"+p+">"); :} 
				| term:t DIV power:p				{: RESULT = t/p;
					System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> DIV power<"+p+">"); :} 
                | power:p							{: RESULT = p;
					System.out.println("    PARSER:: term<"+RESULT+"> <== power<"+p+">"); :}
                ;
				
power			::= factor:f EXP power:p			{: RESULT = Math.pow(f,p);	
					System.out.println("    PARSER:: power<"+RESULT+"> <== factor<"+f+"> EXP power<"+p+">"); :} 
                | factor:f							{: RESULT = f;
					System.out.println("    PARSER:: power<"+RESULT+"> <== factor<"+f+">"); :}
				;
					
factor          ::= NUMBER:n						{: RESULT = n;
					System.out.println("    PARSER:: factor <== NUMBER <"+n+">"); :} 
				| LP arithExpr:a RP					{: RESULT = a;
					System.out.println("    PARSER:: factor <== LP arithExpr<"+a+"> RP"); :}
                | MINUS factor:f					{: RESULT = -f;
					System.out.println("    PARSER:: factor <== MINUS factor<"+f+">"); :} 
				| PLUS factor:f						{: RESULT = f;
					System.out.println("    PARSER:: factor <== PLUS factor<"+f+">"); :}
				| IDENT:i							{: RESULT = table.get(i);
					System.out.println("    PARSER:: factor <== IDENT <"+i+"> = factor <" + table.get(i) + ">"); :} 
                ;

					

