// MiniLanInicialS1.cup
// Version para inicial para el Analisis Sintactico 
import java_cup.runtime.*;

action code {:
		NewHashMap table = new NewHashMap();
:};

parser code {:
        public static void main(String args[]) throws Exception {
                new parser(new Yylex(System.in)).parse();        } // End Main
:} // End parser code

terminal BEGIN, END, PRINT;
terminal PLUS, MINUS, MULT, DIV;
terminal EOS, LP, RP, KR, KL;
terminal LT, GT, EQ, SET, IF, ELSEIF, ELSE;
terminal Double NUMBER;
terminal String IDENT;

non terminal program, instructions, instruction, sentence;
non terminal Double arithExpr, term, factor;
non terminal printSentence, assignSentence, condicionalSentence;
non terminal Boolean boolExpr;


program		::= BEGIN instructions END           		  {: System.out.println("    PARSER:: program <== BEGIN instructions END"); :}
                   ;

instructions	::= instructions instruction          	  {: System.out.println("    PARSER:: instructions <== instructions instruction");:} 	
                   | instruction                      	  {: System.out.println("    PARSER:: instructions <== instruction");:} 	
                   ;

instruction    	::= sentence EOS                      	  {: System.out.println("    PARSER:: instruction <== sentence EOS");:} 
				   | condicionalSentence				  {: System.out.println("    PARSER:: instruction <== condicionalSentence ");:}
                   ;	

sentence        ::= printSentence                    	  {: System.out.println("    PARSER:: sentence <== printSentence ");:} 
				   | assignSentence				     	  {: System.out.println("    PARSER:: sentence <== assignSentence ");:} 
                   ;
					
printSentence   ::= PRINT LP arithExpr:a RP               {: System.out.println("    PARSER:: printSentence <== PRINT ( arithExpr<"+a+"> )"); :}
				   |PRINT LP boolExpr:a RP                {: System.out.println("    PARSER:: printSentence <== PRINT ( boolExpr<"+a+"> )"); :}
                   ;
			
assignSentence   ::= IDENT:id SET arithExpr:v             {: System.out.println("    PARSER:: assignSentence <== IDENT<"+id+"> SET arithExpr<"+v+">");
																table.put(id, v); :}
                   ;
				   
condicionalSentence   ::= IF LP boolExpr:a RP KL instructions KR      
														  {: System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)"); :}
				         |IF LP boolExpr:a RP KL instructions KR ELSE KL instructions KR       
														  {: System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)-ELSE"); :}
						 |IF LP boolExpr:a RP KL instructions KR ELSEIF LP boolExpr:b RP KL instructions KR ELSE KL instructions KR       
														  {: System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)-ELIF(<"+b+">)-ELSE"); :}
                   ;				   

				   
arithExpr       ::= arithExpr:a PLUS term:t               {: RESULT=a+t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> PLUS term<"+t+"> "); :} 
                   | arithExpr:a MINUS term:t             {: RESULT=a-t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> MINUS term<"+t+"> "); :}
                   | term:t                               {: RESULT=t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== term<"+t+"> "); :}
                   ;
				
term            ::= term:t MULT factor:f                  {: RESULT=t*f; 
																System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> MULT factor<"+f+"> "); :}  
                   | term:t DIV factor:f                  {: RESULT=t/f; 
																System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> DIV factor<"+f+"> "); :}  
                   | factor:f                             {: RESULT=f;
																System.out.println("    PARSER:: term<"+RESULT+"> <== factor<"+f+"> "); :}
                   ;
					
factor          ::= NUMBER:n                              {: RESULT=new Double(n); 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== NUMBER<"+n+"> "); :} 
				   | LP arithExpr:a RP                    {: RESULT=a; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== ( arithExpr<"+a+"> ) "); :}
				   | PLUS factor:f                        {: RESULT=f; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== PLUS factor<"+f+">  "); :}
				   | MINUS factor:f                       {: RESULT=-f; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== MINUS factor<"+f+">  "); :}
				   | IDENT:name							  {: RESULT=(Double) table.get(name); 
																System.out.println("    PARSER:: factor <== IDENT<"+name+": "+RESULT+">  "); :}
                   ;
				   
boolExpr		::= arithExpr:a1 LT arithExpr:a2   		  {: RESULT = a1<a2; 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" LT "+a2); :}
				   | arithExpr:a1 GT arithExpr:a2         {: RESULT = a1>a2; 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" GT "+a2); :}
				   | arithExpr:a1 EQ arithExpr:a2         {: RESULT = a1.equals(a2); 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" EQ "+a2); :}
				   ;
				  				   
