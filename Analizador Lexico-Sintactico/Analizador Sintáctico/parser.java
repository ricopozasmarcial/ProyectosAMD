
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 28 17:23:45 CEST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 28 17:23:45 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\011\006\000" +
    "\002\011\006\000\002\012\005\000\002\013\011\000\002" +
    "\013\015\000\002\013\024\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\004\005\001\002\000\004\002\110\001" +
    "\002\000\010\006\015\024\013\030\007\001\002\000\014" +
    "\005\ufffe\006\ufffe\016\ufffe\024\ufffe\030\ufffe\001\002\000" +
    "\004\023\106\001\002\000\012\005\105\006\015\024\013" +
    "\030\007\001\002\000\004\013\ufffa\001\002\000\004\013" +
    "\104\001\002\000\004\014\055\001\002\000\004\013\ufffb" +
    "\001\002\000\004\014\017\001\002\000\014\005\ufffc\006" +
    "\ufffc\016\ufffc\024\ufffc\030\ufffc\001\002\000\014\007\027" +
    "\010\020\014\022\027\024\030\023\001\002\000\014\007" +
    "\027\010\020\014\022\027\024\030\023\001\002\000\016" +
    "\007\040\010\041\015\050\020\045\021\047\022\046\001" +
    "\002\000\014\007\027\010\020\014\022\027\024\030\023" +
    "\001\002\000\024\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\015\uffe9\020\uffe9\021\uffe9\022\uffe9\001\002\000\024" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\020" +
    "\uffed\021\uffed\022\uffed\001\002\000\024\007\ufff1\010\ufff1" +
    "\011\033\012\034\013\ufff1\015\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\001\002\000\004\015\032\001\002\000\014\007\027" +
    "\010\020\014\022\027\024\030\023\001\002\000\024\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\020\uffee" +
    "\021\uffee\022\uffee\001\002\000\024\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\001\002\000\004\013\ufff8\001\002\000\014\007\027\010" +
    "\020\014\022\027\024\030\023\001\002\000\014\007\027" +
    "\010\020\014\022\027\024\030\023\001\002\000\024\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\020\uffef" +
    "\021\uffef\022\uffef\001\002\000\024\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\001\002\000\010\007\040\010\041\015\042\001\002\000" +
    "\014\007\027\010\020\014\022\027\024\030\023\001\002" +
    "\000\014\007\027\010\020\014\022\027\024\030\023\001" +
    "\002\000\024\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\020\uffec\021\uffec\022\uffec\001\002\000\024\007" +
    "\ufff2\010\ufff2\011\033\012\034\013\ufff2\015\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\001\002\000\024\007\ufff3\010\ufff3\011" +
    "\033\012\034\013\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\001\002\000\014\007\027\010\020\014\022\027\024\030" +
    "\023\001\002\000\014\007\027\010\020\014\022\027\024" +
    "\030\023\001\002\000\014\007\027\010\020\014\022\027" +
    "\024\030\023\001\002\000\004\013\ufff9\001\002\000\010" +
    "\007\040\010\041\015\uffe7\001\002\000\010\007\040\010" +
    "\041\015\uffe6\001\002\000\010\007\040\010\041\015\uffe8" +
    "\001\002\000\024\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\015\uffea\020\uffea\021\uffea\022\uffea\001\002\000\014" +
    "\007\027\010\020\014\022\027\024\030\023\001\002\000" +
    "\014\007\040\010\041\020\045\021\047\022\046\001\002" +
    "\000\004\015\060\001\002\000\004\017\061\001\002\000" +
    "\010\006\015\024\013\030\007\001\002\000\012\006\015" +
    "\016\064\024\013\030\007\001\002\000\014\005\uffff\006" +
    "\uffff\016\uffff\024\uffff\030\uffff\001\002\000\020\005\ufff6" +
    "\006\ufff6\016\ufff6\024\ufff6\025\066\026\065\030\ufff6\001" +
    "\002\000\004\017\101\001\002\000\004\014\067\001\002" +
    "\000\014\007\027\010\020\014\022\027\024\030\023\001" +
    "\002\000\004\015\071\001\002\000\004\017\072\001\002" +
    "\000\010\006\015\024\013\030\007\001\002\000\012\006" +
    "\015\016\074\024\013\030\007\001\002\000\004\026\075" +
    "\001\002\000\004\017\076\001\002\000\010\006\015\024" +
    "\013\030\007\001\002\000\012\006\015\016\100\024\013" +
    "\030\007\001\002\000\014\005\ufff4\006\ufff4\016\ufff4\024" +
    "\ufff4\030\ufff4\001\002\000\010\006\015\024\013\030\007" +
    "\001\002\000\012\006\015\016\103\024\013\030\007\001" +
    "\002\000\014\005\ufff5\006\ufff5\016\ufff5\024\ufff5\030\ufff5" +
    "\001\002\000\014\005\ufffd\006\ufffd\016\ufffd\024\ufffd\030" +
    "\ufffd\001\002\000\004\002\001\001\002\000\014\007\027" +
    "\010\020\014\022\027\024\030\023\001\002\000\010\007" +
    "\040\010\041\013\ufff7\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\007\004\005\005\011\011\013\012\010\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\062\005\011\011\013\012\010\013\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\020" +
    "\007\024\010\027\014\025\001\001\000\004\010\053\001" +
    "\001\000\002\001\001\000\010\006\036\007\024\010\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\035\001\001\000\004\010\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\043\010" +
    "\027\001\001\000\006\007\042\010\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\052\007\024\010\027\001\001\000\010\006\051\007\024" +
    "\010\027\001\001\000\010\006\050\007\024\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\055\007" +
    "\024\010\027\014\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\061\004\005\005" +
    "\011\011\013\012\010\013\015\001\001\000\014\004\062" +
    "\005\011\011\013\012\010\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\055\007\024\010\027\014\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\072\004\005" +
    "\005\011\011\013\012\010\013\015\001\001\000\014\004" +
    "\062\005\011\011\013\012\010\013\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\076\004\005\005" +
    "\011\011\013\012\010\013\015\001\001\000\014\004\062" +
    "\005\011\011\013\012\010\013\015\001\001\000\002\001" +
    "\001\000\016\003\101\004\005\005\011\011\013\012\010" +
    "\013\015\001\001\000\014\004\062\005\011\011\013\012" +
    "\010\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\106\007\024\010\027\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static void main(String args[]) throws Exception {
                new parser(new Yylex(System.in)).parse();        } // End Main

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


		NewHashMap table = new NewHashMap();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolExpr ::= arithExpr EQ arithExpr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a1.equals(a2); 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" EQ "+a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolExpr ::= arithExpr GT arithExpr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a1>a2; 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" GT "+a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolExpr ::= arithExpr LT arithExpr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a1<a2; 
																System.out.println("    PARSER:: boolExpr<"+RESULT+"> <== "+a1+" LT "+a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= IDENT 
            {
              Double RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=(Double) table.get(name); 
																System.out.println("    PARSER:: factor <== IDENT<"+name+": "+RESULT+">  "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= MINUS factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=-f; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== MINUS factor<"+f+">  "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= PLUS factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== PLUS factor<"+f+">  "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= LP arithExpr RP 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== ( arithExpr<"+a+"> ) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Double(n); 
																System.out.println("    PARSER:: factor<"+RESULT+"> <== NUMBER<"+n+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
																System.out.println("    PARSER:: term<"+RESULT+"> <== factor<"+f+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term DIV factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t/f; 
																System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> DIV factor<"+f+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term MULT factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t*f; 
																System.out.println("    PARSER:: term<"+RESULT+"> <== term<"+t+"> MULT factor<"+f+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arithExpr ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== term<"+t+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithExpr ::= arithExpr MINUS term 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a-t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> MINUS term<"+t+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arithExpr ::= arithExpr PLUS term 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a+t; 
																System.out.println("    PARSER:: arithExpr<"+RESULT+"> <== arithExpr<"+a+"> PLUS term<"+t+"> "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithExpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condicionalSentence ::= IF LP boolExpr RP KL instructions KR ELSEIF LP boolExpr RP KL instructions KR ELSE KL instructions KR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)-ELIF(<"+b+">)-ELSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionalSentence",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condicionalSentence ::= IF LP boolExpr RP KL instructions KR ELSE KL instructions KR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)-ELSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionalSentence",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condicionalSentence ::= IF LP boolExpr RP KL instructions KR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("    PARSER:: condicionalSentence <== IF(<"+a+">)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionalSentence",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignSentence ::= IDENT SET arithExpr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("    PARSER:: assignSentence <== IDENT<"+id+"> SET arithExpr<"+v+">");
																table.put(id, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignSentence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // printSentence ::= PRINT LP boolExpr RP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("    PARSER:: printSentence <== PRINT ( boolExpr<"+a+"> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // printSentence ::= PRINT LP arithExpr RP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("    PARSER:: printSentence <== PRINT ( arithExpr<"+a+"> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= assignSentence 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: sentence <== assignSentence ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= printSentence 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: sentence <== printSentence ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= condicionalSentence 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instruction <== condicionalSentence ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= sentence EOS 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instruction <== sentence EOS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: instructions <== instructions instruction");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BEGIN instructions END 
            {
              Object RESULT =null;
		 System.out.println("    PARSER:: program <== BEGIN instructions END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

